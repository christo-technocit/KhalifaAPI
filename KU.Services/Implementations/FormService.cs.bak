using AutoMapper;
using KU.Repositories;
using KU.Repositories.Models;
using KU.Services.Interfaces;
using KU.Services.ViewModels;
using System;
using System.Collections.Generic;
using System.Text;

namespace KU.Services.Implementations
{
    public class FormService: IFormService 
    {
        private readonly IUnitOfWork unitOfWork;
        private readonly IMapper mapper;
        public FormService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            this.unitOfWork = unitOfWork;
            this.mapper = mapper;
        }

        public IEnumerable<SavedFormViewModel> GetAllSavedForms()
        {
            var all = unitOfWork.SavedForms.GetAllIncludedData();
            
            return mapper.Map<IEnumerable<SavedFormViewModel>>(all);
        }
        public IEnumerable<Template> GetAllTemplates()
        {
            var all = unitOfWork.Templates.
                GetAllIncludedData();
       return mapper.Map<IEnumerable<Template>>(all);
        }

        public IEnumerable<SavedFormViewModel> GetSavedFormByID(Int32 TemplateID, Int32 savedFormID, Int32 orderby, Int32 sortorder, Int32 pagesize, Int32 pagenumber, string filter)
        {
            var all = unitOfWork.SavedForms.GetSavedFormByID(TemplateID, savedFormID, orderby, sortorder, pagesize, pagenumber, filter);
            return mapper.Map<IEnumerable<SavedFormViewModel>>(all);
        }

        // user module begin
        public IEnumerable<ApplicationUsers> GetAllIncludedData()
        {
            var all = unitOfWork.ApplicationUsers.GetAllIncludedData();

            return mapper.Map<IEnumerable<ApplicationUsers>>(all);
        }
        public IEnumerable<ApplicationUsers> GetUser(string UserName, string Password)
        {
            var all = unitOfWork.ApplicationUsers.GetUser(UserName, Password);
            return mapper.Map<IEnumerable<ApplicationUsers>>(all);
        }
        public IEnumerable<AspNetUsers> CheckUserID(string UserName, string Password)
        {
            var all = unitOfWork.AspNetUsers.CheckUserID(UserName, Password);
            return mapper.Map<IEnumerable<AspNetUsers>>(all);
        }
        public IEnumerable<AspNetUsers> CheckToken(string Token)
        {
            var all = unitOfWork.AspNetUsers.CheckToken(Token);
            return mapper.Map<IEnumerable<AspNetUsers>>(all);
        }

        // user module end



        public IEnumerable<FormAttributeValue> GetFormByID (Int32 savedFormID)
        {
            var all = unitOfWork.FormAttributeValues.GetFormByID(savedFormID);
            return mapper.Map<IEnumerable<FormAttributeValue>>(all);
        }

        public IEnumerable<FormAttribute> GetAttributeName(Int32 TemplateID, Int32 savedFormID)
        {
            var all = unitOfWork.FormAttributes.GetAttributeName(TemplateID, savedFormID);
            return mapper.Map<IEnumerable<FormAttribute>>(all);
        }
        public IEnumerable<FormAttribute> GetAttributeID(Int32 TemplateID, Int32 SectionID, String AttributeName)
        {
            var all = unitOfWork.FormAttributes.GetAttributeID(TemplateID, SectionID, AttributeName);
            return mapper.Map<IEnumerable<FormAttribute>>(all);
        }

        public IEnumerable<Questionnaire3> GetSampleID(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire3.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire3>>(all);
        }

        public IEnumerable<Questionnaire2> GetSampleID2(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire2.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire2>>(all);
        }

        //public IEnumerable<Questionnaire2section> GetSampleID2sec(Int32 SampleID)
        //{
        //    var all = unitOfWork.questionnaire2section.GetSampleID(SampleID);
        //    return mapper.Map<IEnumerable<Questionnaire2section>>(all);
        //}
        public IEnumerable<Questionnaire1> GetSampleID1(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire1.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire1>>(all);
        }

   public IEnumerable<Questionnaire4> GetSampleID4(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire4.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire4>>(all);
        }

        public IEnumerable<Questionnaire5> GetSampleID5(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire5.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire5>>(all);
        }

        public IEnumerable<Questionnaire6> GetSampleID6(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire6.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire6>>(all);
        }

        public IEnumerable<Questionnaire7> GetSampleID7(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire7.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire7>>(all);
        }

        public IEnumerable<Questionnaire8> GetSampleID8(Int32 SampleID)
        {
            var all = unitOfWork.questionnaire8.GetSampleID(SampleID);
            return mapper.Map<IEnumerable<Questionnaire8>>(all);
        }
        public IEnumerable<TotalRecords> GetTotal(Int32 TemplateID, Int32 PageSize, string SearchStr)
        {
            var all = unitOfWork.totalRecords.GetTotal(TemplateID, PageSize, SearchStr);
            return mapper.Map<IEnumerable<TotalRecords>>(all);
        }
        public long InsertSavedForm(SavedFormViewModel model)
        {
            var entity = mapper.Map<SavedForm>(model);
            unitOfWork.SavedForms.Add(entity);
            unitOfWork.SaveChanges();
            return entity.SavedFormID;
        }

        public long UpdateSavedForm(SavedFormViewModel model)
        {
            var entity = mapper.Map<SavedForm>(model);

            unitOfWork.SavedForms.Update(entity);

            unitOfWork.SaveChanges();
            return entity.SavedFormID;
        }
        //
        public long InsertFormAttributeValue(FormAttributeValueViewModel model)
        {
            var entity = mapper.Map<FormAttributeValue>(model);
            unitOfWork.FormAttributeValues.Add(entity);
            unitOfWork.SaveChanges();
            return entity.SavedFormID;
        }

        public bool InsertFormAttributeValues(List<FormAttributeValueViewModel> model)
        {
            var entities = mapper.Map<List<FormAttributeValue>>(model);
            unitOfWork.FormAttributeValues.AddRange(entities);
            unitOfWork.SaveChanges();
            return true;
        }
        public long UpdateFormAttributeValue(FormAttributeValueViewModel model)
        {
            var entity = mapper.Map<FormAttributeValue>(model);

            unitOfWork.FormAttributeValues.Update(entity);

            unitOfWork.SaveChanges();
            return entity.SavedFormID;
        }


        public bool UpdateFormAttributeValues(List<FormAttributeValueViewModel> model)
        {
            var entities = mapper.Map<List<FormAttributeValue>>(model);

            unitOfWork.FormAttributeValues.UpdateRange(entities);

            unitOfWork.SaveChanges();
            return true;
        }
    }
}
